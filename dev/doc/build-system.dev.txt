For what a Coq developer needs to know about the build system, see
build-system.dune.md

HISTORY:
-------

* July 2007 (Pierre Corbineau & Lionel Elie Mamane).
  Inclusion of a build system with 3 explicit phases:
  - Makefile.stage1: ocamldep, sed, camlp4 without Coq grammar extension
  - Makefile.stage2: camlp4 with grammar.cma or q_constr.cmo
  - Makefile.stage3: coqdep (.vo)

* March 2010 (Pierre Letouzey).
  Revised build system. In particular, no more stage1,2,3 :
  - Stage3 was removed some time ago when coqdep was splitted into
    coqdep_boot and full coqdep.
  - Stage1,2 were replaced by brutal inclusion of all .d at the start
    of Makefile.build, without trying to guess what could be done at
    what time. Some initial inclusions hence _fail_, but "make" tries
    again later and succeed.
  - Btw, .ml4 are explicitely turned into .ml files, which stay after build.
    By default, they are in binary ast format, see READABLE_ML4 option.

* February 2014 (Pierre Letouzey).
  Another revision of the build system. We avoid relying on the awkward
  include-which-fails-but-works-finally-after-a-retry feature of gnu make.
  This was working, but was quite hard to understand. Instead, we reuse
  the idea of two explicit phases, but in a lighter way than in 2007.
  The main Makefile calls Makefile.build twice :
  - first for building grammar.cma (and q_constr.cmo), with a
    restricted set of .ml4 (see variable BUILDGRAMMAR).
  - then on the true target asked by the user.

* June 2016 (Pierre Letouzey)
  The files in grammar/ are now self-contained, we could compile
  grammar.cma (and q_constr.cmo) directly, no need for a separate
  subcall to make nor awkward include-failed-and-retry.

* February - September 2018 (Emilio Jes√∫s Gallego Arias)

  Dune support added.

  The build setup is mostly vanilla for the OCaml part, however the
  `.v` to `.vo` compilation relies on `coq_dune` a `coqdep` wrapper
  that will generate the necessary `dune` files.

  As a developer, you should not have to deal with Dune configuration
  files on a regular basis unless adding a new library or plugin.

  The vanilla setup declares all the Coq libraries and binaries [we
  must respect proper containment/module implementation rules as to
  allow packing], and we build custom preprocessors (based on `camlp5`
  and `coqpp`) that will process the `ml4`/`mlg` files.

  This suffices to build `coqtop` and `coqide`, all that remains to
  handle is `.vo` compilation.

  To teach Dune about the `.vo`, we use a small utility `coq_dune`,
  that will generate a `dune` file for each directory in `plugins` and
  `theories`. The code is pretty straightforward and declares build
  and install rules for each `.v` straight out of `coqdep`. Thus, our
  build strategy looks like this:

  1. Use `dune` to build `coqdep` and `coq_dune`.
  2. Use `coq_dune` to generate `dune` files for each directory with `.v` files.
  3. ?
  4. Profit! [Seriously, at this point Dune has all the information to build Coq]
