; This is a hack needed for the coq_makefile tests to work correctly.
;
; In systems without symlinks coq_makefile will fail to infer the
; correct path [as it expects a build, not an installed layout], and
; we cannot use %{project_root} as coq_makefile does not use ocamlfind
; to find the object files, thus as the Dune build directory uses a
; different layout for objects it will fail.
;
; It turns out only the installed paths are in a compatible layout, so
; we must compute the installed. Unfortunately there is not a portable
; way to do unless we use ocaml itself.
(executable
 (name curdir)
 (modules curdir))

(rule
 (targets curdir.path)
 (action
  (with-outputs-to curdir.path (run ./curdir.exe))))

(rule
 (targets summary.log)
 (deps
   ; File that should be promoted.
   misc/universes/all_stdlib.v
   ; Dependencies of the legacy makefile
   ../Makefile.common
   ../config/Makefile
   ; Stuff for the compat script test
   ../dev/header.ml
   ../dev/tools/update-compat.py
   ../doc/stdlib/index-list.html.template
  (package coq)
  ; For fake_ide
  (package coqide-server)
  ; Contents of the tests themselves
  (source_tree .))
 (action
  (progn
   ; XXX: we will allow to set the NJOBS variable in a future Dune
   ; version, either by using an env var or by letting Dune set `-j`
   ; (run make -j 2 BIN= PRINT_LOGS=1 UNIT_TESTS=%{env:COQ_UNIT_TEST=unit-tests}))))
   (run make -j 2 BIN= LIB=%{read:curdir.path}/../../install/%{context_name}/lib/coq/ PRINT_LOGS=1))))
